#DNN Models
python train.py --model_architecture dnn --model_size_info 144 144 144 --dct_coefficient_count 10 --window_size_ms 40 --window_stride_ms 40 --learning_rate 0.0005,0.0001,0.00002 --how_many_training_steps 10000,10000,10000 --summaries_dir work/DNN/DNN1/retrain_logs --train_dir work/DNN/DNN1/training
python train.py --model_architecture dnn --model_size_info 256 256 256 --dct_coefficient_count 10 --window_size_ms 40 --window_stride_ms 40 --learning_rate 0.0005,0.0001,0.00002 --how_many_training_steps 10000,10000,10000 --summaries_dir work/DNN/DNN2/retrain_logs --train_dir work/DNN/DNN2/training
python train.py --model_architecture dnn --model_size_info 436 436 436 --dct_coefficient_count 10 --window_size_ms 40 --window_stride_ms 40 --learning_rate 0.0005,0.0001,0.00002 --how_many_training_steps 10000,10000,10000 --summaries_dir work/DNN/DNN3/retrain_logs --train_dir work/DNN/DNN3/training

#DS-CNN Models
python train.py --model_architecture ds_cnn --model_size_info 5 64 10 4 2 2 64 3 3 1 1 64 3 3 1 1 64 3 3 1 1 64 3 3 1 1 --dct_coefficient_count 10 --window_size_ms 40 --window_stride_ms 20 --learning_rate 0.0005,0.0001,0.00002 --how_many_training_steps 10000,10000,10000 --summaries_dir work/DS_CNN/DS_CNN1/retrain_logs --train_dir work/DS_CNN/DS_CNN1/training
python train.py --model_architecture ds_cnn --model_size_info 5 172 10 4 2 1 172 3 3 2 2 172 3 3 1 1 172 3 3 1 1 172 3 3 1 1 --dct_coefficient_count 10 --window_size_ms 40 --window_stride_ms 20 --learning_rate 0.0005,0.0001,0.00002 --how_many_training_steps 10000,10000,10000 --summaries_dir work/DS_CNN/DS_CNN2/retrain_logs --train_dir work/DS_CNN/DS_CNN2/training
python train.py --model_architecture ds_cnn --model_size_info 6 276 10 4 2 1 276 3 3 2 2 276 3 3 1 1 276 3 3 1 1 276 3 3 1 1 276 3 3 1 1 --dct_coefficient_count 10 --window_size_ms 40 --window_stride_ms 20 --learning_rate 0.0005,0.0001,0.00002 --how_many_training_steps 10000,10000,10000 --summaries_dir work/DS_CNN/DS_CNN3/retrain_logs --train_dir work/DS_CNN/DS_CNN3/training


USED:
python train.py --model_architecture ds_cnn --model_size_info 5 64 10 4 2 2 64 3 3 1 1 64 3 3 1 1 64 3 3 1 1 64 3 3 1 1 --clip_duration_ms 1000 --dct_coefficient_count 10 --window_size_ms 100 --window_stride_ms 50 --learning_rate 0.0005,0.0001,0.00002 --how_many_training_steps 2000,2000,2000 --summaries_dir max/DS_CNN/DS_CNN1/retrain_logs --train_dir max/DS_CNN/DS_CNN1/training --wanted_words "crying_baby,glass_breaking,siren"  --data_dir D:\Data\new_data_training_downsample

python convert.py --model_architecture ds_cnn --model_size_info 5 64 10 4 2 2 64 3 3 1 1 64 3 3 1 1 64 3 3 1 1 64 3 3 1 1 --clip_duration_ms 1000 --dct_coefficient_count 10 --window_size_ms 100 --window_stride_ms 50 --checkpoint max/DS_CNN/DS_CNN1/training/best/ds_cnn_0.921_ckpt --inference_type fp32 --data_dir D:\Data\new_data_training_downsample --wanted_words "crying_baby,glass_breaking,siren"

python generate_c_file.py --model_id AA99 --model_name nuv_pipe --model_architecture ds_cnn --inference_type fp32 --model_size_info 5 64 10 4 2 2 64 3 3 1 1 64 3 3 1 1 64 3 3 1 1 64 3 3 1 1 --clip_duration_ms 1000 --dct_coefficient_count 10 --window_size_ms 100 --window_stride_ms 50 --learning_rate 0.0005,0.0001,0.00002 --how_many_training_steps 10000,10000,10000 --summaries_dir max/DS_CNN/DS_CNN1/retrain_logs --train_dir max/DS_CNN/DS_CNN1/training --wanted_words "crying_baby,glass_breaking,siren"  --data_dir D:\Data\new_data_training_unbalanced_aux


    parser.add_argument("--model_id", required=True, help="Model identifier.")
    parser.add_argument("--model_name", required=True, help="Model name.")
    parser.add_argument("--model_architecture", required=True, help="Model architecture.")
    parser.add_argument("--inference_type", required=True, help="Inference type.")
    parser.add_argument("--output_dir", required=True, help="Output directory for the C file.")
    parser.add_argument("--window_stride_ms", type=int, required=True, help="Frame shift in milliseconds.")
    parser.add_argument("--window_size_ms", type=int, required=True, help="Frame length in milliseconds.")
    parser.add_argument("--dct_coefficient_count", type=int, required=True, help="Number of MFCC coefficients.")
    parser.add_argument("--clip_duration_ms", type=int, required=True, help="Total clip duration in milliseconds.")
    parser.add_argument("--tflite_path", required=True, help="Path to the TFLite model file.")
    parser.add_argument("--verbose", action='store_true', help="Enable verbose logging.")
